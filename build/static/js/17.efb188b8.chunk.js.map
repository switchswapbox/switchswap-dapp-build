{"version":3,"sources":["pages/CruFaucet.tsx","components/Page.tsx","components/_dashboard/funBox/MaticFormSchema.ts","components/_dashboard/funBox/CruFormSchema.ts","components/_dashboard/funBox/FaucetHookForm.tsx"],"names":["CountdownStyle","styled","display","justifyContent","SeparatorStyle","Typography","theme","margin","spacing","breakpoints","up","CountDown","timeLeftInSeconds","days","Math","floor","hours","minutes","seconds","variant","sx","color","CruFaucet","themeStretch","useSettings","useState","tweetId","setTweetId","message","statusCode","txHash","response","setResponse","dedicatedTimeleft","setDedicatedTimeleft","useEffect","console","log","title","maxWidth","container","item","xs","sm","position","token","mt","severity","action","size","href","target","align","Page","forwardRef","ref","children","other","MaticFormSchema","Yup","shape","address","required","test","value","context","ethers","utils","isAddress","toLowerCase","tweetUrl","url","keyring","Keyring","CruFormSchema","encodeAddress","isHex","hexToU8a","decodeAddress","error","isValidSubstrateAddress","FaucetHookForm","defaultValues","FormSchema","useForm","mode","resolver","yupResolver","reset","watch","control","handleSubmit","formState","isSubmitting","isDirty","watchingUrl","searchTweetId","match","onSubmit","data","a","axios","post","result","Stack","name","render","field","fieldState","TextField","label","Boolean","helperText","Divider","my","Button","startIcon","icon","LoadingButton","fullWidth","type","loading","disabled"],"mappings":"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","file":"static/js/17.efb188b8.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\n// material\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Container,\r\n  Grid,\r\n  Stack,\r\n  Alert,\r\n  Button,\r\n  Typography\r\n} from '@mui/material';\r\nimport { styled } from '@mui/material/styles';\r\n\r\n// hooks\r\nimport useSettings from '../hooks/useSettings';\r\n// components\r\nimport Page from '../components/Page';\r\nimport FaucetHookForm from 'components/_dashboard/funBox/FaucetHookForm';\r\nimport { Tweet } from 'react-twitter-widgets';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport interface ResponseFaucetRequest {\r\n  message: string;\r\n  statusCode: number;\r\n  timeLeftInSeconds: number | null;\r\n  txHash: string | null;\r\n}\r\n\r\nconst CountdownStyle = styled('div')({\r\n  display: 'flex',\r\n  justifyContent: 'center'\r\n});\r\n\r\nconst SeparatorStyle = styled(Typography)(({ theme }) => ({\r\n  margin: theme.spacing(0, 1),\r\n  [theme.breakpoints.up('sm')]: {\r\n    margin: theme.spacing(0, 2.5)\r\n  }\r\n}));\r\n\r\nfunction CountDown({ timeLeftInSeconds }: { timeLeftInSeconds: number }) {\r\n  const days = Math.floor(timeLeftInSeconds / (3600 * 24));\r\n  const hours = Math.floor((timeLeftInSeconds % (3600 * 24)) / 3600);\r\n  const minutes = Math.floor((timeLeftInSeconds % 3600) / 60);\r\n  const seconds = Math.floor(timeLeftInSeconds % 60);\r\n\r\n  return (\r\n    <CountdownStyle>\r\n      <div>\r\n        <Typography variant=\"h3\">{days}</Typography>\r\n        <Typography sx={{ color: 'text.secondary' }}>Days</Typography>\r\n      </div>\r\n\r\n      <SeparatorStyle variant=\"h3\">:</SeparatorStyle>\r\n\r\n      <div>\r\n        <Typography variant=\"h3\">{hours}</Typography>\r\n        <Typography sx={{ color: 'text.secondary' }}>Hours</Typography>\r\n      </div>\r\n\r\n      <SeparatorStyle variant=\"h3\">:</SeparatorStyle>\r\n\r\n      <div>\r\n        <Typography variant=\"h3\">{minutes}</Typography>\r\n        <Typography sx={{ color: 'text.secondary' }}>Minutes</Typography>\r\n      </div>\r\n\r\n      <SeparatorStyle variant=\"h3\">:</SeparatorStyle>\r\n\r\n      <div>\r\n        <Typography variant=\"h3\">{seconds}</Typography>\r\n        <Typography sx={{ color: 'text.secondary' }}>Seconds</Typography>\r\n      </div>\r\n    </CountdownStyle>\r\n  );\r\n}\r\n\r\nexport default function CruFaucet() {\r\n  const { themeStretch } = useSettings();\r\n\r\n  const [tweetId, setTweetId] = useState('');\r\n\r\n  const [response, setResponse] = useState<ResponseFaucetRequest>({\r\n    message: '',\r\n    statusCode: -1,\r\n    timeLeftInSeconds: null,\r\n    txHash: null\r\n  });\r\n\r\n  const [dedicatedTimeleft, setDedicatedTimeleft] = useState(0);\r\n\r\n  useEffect(() => {\r\n    console.log(`timeLeftInSeconds ${response.timeLeftInSeconds}`);\r\n    if (response.timeLeftInSeconds !== null) {\r\n      setDedicatedTimeleft(response.timeLeftInSeconds);\r\n    }\r\n  }, [response.timeLeftInSeconds]);\r\n\r\n  return (\r\n    <Page title=\"Learn More\">\r\n      <Container maxWidth={themeStretch ? false : 'xl'}>\r\n        <Grid container spacing={5} justifyContent=\"center\">\r\n          <Grid item xs={12} sm={6}>\r\n            <Card sx={{ position: 'static' }}>\r\n              <CardHeader title=\"$CRU faucet\" />\r\n              <CardContent>\r\n                <FaucetHookForm setTweetId={setTweetId} setResponse={setResponse} token=\"CRU\" />\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            sm={6}\r\n            sx={{ display: tweetId !== '' || response.statusCode !== -1 ? 'block' : 'none' }}\r\n          >\r\n            <Card sx={{ position: 'static' }}>\r\n              <CardHeader title=\"Status\" />\r\n              <CardContent>\r\n                <Stack sx={{ mt: '-10px' }}>\r\n                  <Stack sx={{ display: tweetId !== '' ? 'flex' : 'none' }}>\r\n                    <Tweet tweetId={tweetId} />\r\n                  </Stack>\r\n                  <Alert\r\n                    variant=\"outlined\"\r\n                    severity={response.statusCode === 0 ? 'success' : 'warning'}\r\n                    sx={{ display: response.statusCode === -1 ? 'none' : 'flex', mt: 1 }}\r\n                    action={\r\n                      <Button\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        href={`https://crust.subscan.io/extrinsic/${response.txHash}`}\r\n                        target=\"_blank\"\r\n                        sx={{ display: response.statusCode === 0 ? 'flex' : 'none' }}\r\n                      >\r\n                        Subscan\r\n                      </Button>\r\n                    }\r\n                  >\r\n                    {response.message}\r\n                  </Alert>\r\n                  <Stack\r\n                    justifyContent=\"center\"\r\n                    sx={{ display: response.statusCode === 1 ? 'flex' : 'none', mt: 1 }}\r\n                  >\r\n                    <Typography variant=\"h3\" align=\"center\">\r\n                      Try again in\r\n                    </Typography>\r\n                    <CountDown timeLeftInSeconds={dedicatedTimeleft} />\r\n                  </Stack>\r\n                </Stack>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n","import { Helmet } from 'react-helmet-async';\nimport { forwardRef, ReactNode } from 'react';\n// material\nimport { Box, BoxProps } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\ninterface PageProps extends BoxProps {\n  children: ReactNode;\n  title?: string;\n}\n\nconst Page = forwardRef<HTMLDivElement, PageProps>(({ children, title = '', ...other }, ref) => (\n  <Box ref={ref} {...other}>\n    <Helmet>\n      <title>{title}</title>\n    </Helmet>\n    {children}\n  </Box>\n));\n\nexport default Page;\n","import * as Yup from 'yup';\r\nimport { ethers } from 'ethers';\r\n\r\nconst MaticFormSchema = Yup.object().shape({\r\n  address: Yup.string()\r\n    .required('Address is required')\r\n    .test('test-address', 'Address non valid', (value, context) => {\r\n      return ethers.utils.isAddress((value || '').toLowerCase());\r\n    }),\r\n  token: Yup.string(),\r\n  tweetUrl: Yup.string().required('Tweet URL is required').url('Not an URL')\r\n});\r\n\r\nexport default MaticFormSchema;\r\n","import * as Yup from 'yup';\r\n\r\nimport { Keyring } from '@polkadot/api';\r\nimport { hexToU8a, isHex } from '@polkadot/util';\r\n\r\nconst keyring = new Keyring();\r\n\r\nconst isValidSubstrateAddress = (address: string) => {\r\n  try {\r\n    keyring.encodeAddress(isHex(address) ? hexToU8a(address) : keyring.decodeAddress(address));\r\n    return true;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst CruFormSchema = Yup.object().shape({\r\n  address: Yup.string()\r\n    .required('Address is required')\r\n    .test('test-address', 'Address non valid', (value, context) => {\r\n      return isValidSubstrateAddress(value || '');\r\n    }),\r\n  token: Yup.string(),\r\n  tweetUrl: Yup.string().required('Tweet URL is required').url('Not an URL')\r\n});\r\n\r\nexport default CruFormSchema;\r\n","import React, { useEffect } from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport axios from 'axios';\r\nimport { Stack, TextField, Button, Divider, Typography } from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\nimport { ResponseFaucetRequest } from '../../../pages/CruFaucet';\r\nimport { Icon } from '@iconify/react';\r\nimport MaticFormSchema from './MaticFormSchema';\r\nimport CruFormSchema from './CruFormSchema';\r\n\r\ntype FormValuesProps = {\r\n  address: string;\r\n  token: string;\r\n  tweetUrl: string;\r\n};\r\n\r\ntype FaucetHookFormProps = {\r\n  token: string;\r\n  setTweetId: React.Dispatch<React.SetStateAction<string>>;\r\n  setResponse: React.Dispatch<React.SetStateAction<ResponseFaucetRequest>>;\r\n};\r\n\r\nexport default function FaucetHookForm({ token, setTweetId, setResponse }: FaucetHookFormProps) {\r\n  const defaultValues = {\r\n    address: '',\r\n    token,\r\n    tweetUrl: ''\r\n  };\r\n\r\n  let FormSchema = MaticFormSchema;\r\n\r\n  switch (token) {\r\n    case 'MATIC':\r\n      FormSchema = MaticFormSchema;\r\n      break;\r\n    case 'CRU':\r\n      FormSchema = CruFormSchema;\r\n      break;\r\n    default:\r\n      FormSchema = MaticFormSchema;\r\n  }\r\n\r\n  const {\r\n    reset,\r\n    watch,\r\n    control,\r\n    handleSubmit,\r\n    formState: { isSubmitting, isDirty }\r\n  } = useForm<FormValuesProps>({\r\n    mode: 'onTouched',\r\n    resolver: yupResolver(FormSchema),\r\n    defaultValues\r\n  });\r\n\r\n  const watchingUrl = watch('tweetUrl');\r\n\r\n  useEffect(() => {\r\n    const tweetIdReg = /\\/status\\/([0-9]+)/;\r\n    const searchTweetId = watchingUrl.match(tweetIdReg);\r\n\r\n    if (searchTweetId && searchTweetId[1]) {\r\n      setTweetId(searchTweetId[1]);\r\n    }\r\n  }, [watchingUrl]);\r\n\r\n  const onSubmit = async (data: FormValuesProps) => {\r\n    console.log(data);\r\n    // await new Promise((resolve) => setTimeout(resolve, 500));\r\n    const result = await axios.post('https://token-faucet.herokuapp.com/get-faucet', data);\r\n    setResponse(result.data);\r\n    console.log(result.data);\r\n\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <Stack spacing={3}>\r\n          <Controller\r\n            name=\"address\"\r\n            control={control}\r\n            render={({ field, fieldState: { error } }) => (\r\n              <TextField\r\n                {...field}\r\n                label=\"Wallet address\"\r\n                error={Boolean(error)}\r\n                helperText={error?.message}\r\n              />\r\n            )}\r\n          />\r\n          <Divider />\r\n          <Stack>\r\n            <Typography variant=\"h6\">Tweet requirements</Typography>\r\n            <Typography variant=\"body2\" sx={{ color: 'text.secondary', my: 1 }}>\r\n              Write your own tweet including the following keywords: #web3, #ipfs, #switchswap,\r\n              #crustnetwork, #polygon\r\n            </Typography>\r\n            <Typography variant=\"body2\" sx={{ color: 'text.secondary', my: 1 }}>\r\n              Or using Quick Tweet with pre-written tweet\r\n            </Typography>\r\n            <Button\r\n              variant=\"contained\"\r\n              href=\"https://twitter.com/intent/tweet?text=Mint%20your%20decentralized%20NFT%20freely%20on%20switchswap%0A%23web3%20%23ipfs%20%23switchswap%20%23crustnetwork%20%23polygon%0Ahttps%3A//switchswap.io\"\r\n              target=\"_blank\"\r\n              startIcon={<Icon icon=\"logos:twitter\" />}\r\n            >\r\n              Quick tweet\r\n            </Button>\r\n          </Stack>\r\n\r\n          <Controller\r\n            name=\"tweetUrl\"\r\n            control={control}\r\n            render={({ field, fieldState: { error } }) => (\r\n              <TextField\r\n                {...field}\r\n                label=\"Tweet URL\"\r\n                error={Boolean(error)}\r\n                helperText={error?.message}\r\n              />\r\n            )}\r\n          />\r\n\r\n          <LoadingButton\r\n            fullWidth\r\n            color=\"info\"\r\n            size=\"large\"\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            loading={isSubmitting}\r\n            disabled={!isDirty}\r\n          >\r\n            Get Faucet\r\n          </LoadingButton>\r\n        </Stack>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}